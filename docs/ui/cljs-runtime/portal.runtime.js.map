{"version":3,"sources":["portal/runtime.cljc"],"mappings":"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","names":["js/portal","js/portal.runtime","js/portal.runtime.*session*","portal.runtime/*session*","js/portal.runtime.id","portal.runtime/id","cljs.core.atom","portal.runtime/next-id","cljs.core.swap_BANG_","cljs.core/inc","js/portal.runtime.sessions","portal.runtime/sessions","portal.runtime/get-session","session-id","cljs.core/deref","cljs.core.get","cljs.core.assoc","p__50694","map__50696","cljs.core/--destructure-map","portal.runtime/open-session","session","cljs.core.merge","js/portal.runtime.request","portal.runtime/request","portal.runtime/set-timeout","f","timeout","js/setTimeout","portal.runtime/broadcast-change","_watch-key","a","old","new","cljs.core._EQ_","temp__5753__auto__","request","G__50697","portal.runtime/atom?","o","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IAtom","js/portal.runtime.watch-registry","portal.runtime/watch-registry","cljs.core/add-watch","portal.runtime/watch-atom","cljs.core/contains?","atoms","_old","_new","cljs.core/update","portal.runtime/value->id","value","k","cache","id","portal.runtime/value->id?","portal.runtime/id->value","portal.runtime/to-object","tag","rep","portal.runtime.cson.tag","portal.runtime.cson/to-json","cljs.core.pr_str","cljs.core/type","cljs.core/meta","goog.object/set","portal.runtime.cson/ToJson","portal.runtime.cson/-to-json","portal.runtime/var->symbol","v","m","cljs.core.symbol","cljs.core/Var","portal.runtime/can-meta?","portal.runtime/has?","e50701","_e","portal.runtime/no-cache","or__4223__auto__","cljs.core/coll?","portal.runtime/id-coll","temp__5751__auto__","portal.runtime.cson/->Tagged","cljs.core.vary_meta","cljs.core/merge","G__50704","cljs.core/record?","portal.runtime/write","*session*-orig-val__50706","*session*-temp-val__50707","portal.runtime.cson.write","portal.runtime/ref->","cljs.core/second","portal.runtime/read","string","*session*-orig-val__50708","*session*-temp-val__50709","portal.runtime.cson.read","G__50710","cljs.core/first","portal.runtime.cson/json->","js/portal.runtime.tap-list","portal.runtime/tap-list","portal.runtime/update-value","new-value","cljs.core/conj","var_args","G__50712","portal.runtime/clear-values","js/Error","portal.runtime.clear_values","cljs.core/identity","_request","done","cljs.core/reset!","seq__50713","cljs.core/seq","chunk__50714","count__50715","i__50716","vec__50723","cljs.core.nth","cljs.core/chunked-seq?","c__4649__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__50726","cljs.core/next","cljs.core/remove-watch","G__50730","portal.runtime/update-selected","portal.runtime.update_selected","cljs.core/assoc-in","portal.runtime/predicates","p1__50732#","cljs.core/IDeref","portal.runtime/public-fns","cljs.core/pr-str","clojure.datafy/datafy","portal.runtime/get-functions","cljs.core/keys","cljs.core/reduce-kv","fns","s","predicate","cljs.core.dissoc","portal.runtime/get-tap-atom","portal.runtime/get-options","js/process","js/PLANCK_VERSION","portal.runtime/ping","portal.runtime/fns","clojure.datafy/nav","p__50735","map__50736","portal.runtime/invoke","args","e50737","cljs.core/Symbol","js/Promise.resolve","return","cljs.core.apply","G__50739","e","G__50738","portal.runtime/ops","cljs.core/List"],"sourcesContent":["(ns portal.runtime\n  (:refer-clojure :exclude [read])\n  (:require [clojure.datafy :refer [datafy nav]]\n            [portal.runtime.cson :as cson]\n            #?(:clj  [portal.sync  :as a]\n               :cljs [portal.async :as a]))\n  #?(:clj (:import [java.io File]\n                   [java.net URI URL])))\n\n(defonce ^:dynamic *session* nil)\n(defonce ^:private id (atom 0))\n(defn- next-id [] (swap! id inc))\n(defonce sessions (atom {}))\n\n(defn get-session [session-id]\n  (-> @sessions\n      (get session-id)\n      (assoc :session-id session-id)))\n\n(defn open-session [{:keys [session-id] :as session}]\n  (merge\n   (get-session session-id)\n   {:value-cache (atom {})}\n   session))\n\n(defonce request (atom nil))\n\n(defn- set-timeout [f timeout]\n  #?(:clj  (future (Thread/sleep timeout) (f))\n     :cljs (js/setTimeout f timeout)))\n\n(defn broadcast-change [_watch-key a old new]\n  (when-not (= old new)\n    (set-timeout\n     #(when (= @a new)\n        (when-let [request @request]\n          (request {:op :portal.rpc/update-versions :body new})))\n     100)))\n\n(defn- atom? [o]\n  #?(:clj  (instance? clojure.lang.Atom o)\n     :cljs (satisfies? cljs.core/IAtom o)))\n\n(defonce ^:private watch-registry (atom {}))\n(add-watch watch-registry ::watch-key #'broadcast-change)\n\n(defn- watch-atom [a]\n  (when-not (contains? @watch-registry a)\n    (swap!\n     watch-registry\n     (fn [atoms]\n       (if (contains? atoms a)\n         atoms\n         (do\n           (add-watch\n            a\n            ::watch-key\n            (fn [_watch-key a _old _new]\n              (swap! watch-registry update a inc)))\n           (assoc atoms a 0)))))))\n\n(defn- value->id [value]\n  (let [k [:value value]]\n    (-> (:value-cache *session*)\n        (swap!\n         (fn [cache]\n           (if (contains? cache k)\n             cache\n             (let [id (next-id)]\n               (assoc cache [:id id] value k id)))))\n        (get k))))\n\n(defn- value->id? [value]\n  (get @(:value-cache *session*) [:value value]))\n\n(defn- id->value [id]\n  (get @(:value-cache *session*) [:id id]))\n\n(defn- to-object [value tag rep]\n  (when (atom? value) (watch-atom value))\n  (cson/tag\n   \"object\"\n   (cson/to-json\n    {:id     (value->id value)\n     :type   (pr-str (type value))\n     :tag    tag\n     :rep    rep\n     :meta   (meta value)})))\n\n(extend-type #?(:clj Object :cljs default)\n  cson/ToJson\n  (-to-json [value]\n    (to-object value :object nil)))\n\n(defn- var->symbol [v]\n  (let [m (meta v)]\n    (symbol (str (:ns m)) (str (:name m)))))\n\n#?(:bb (def clojure.lang.Var (type #'type)))\n\n(extend-type #?(:clj  clojure.lang.Var\n                :cljs cljs.core/Var)\n  cson/ToJson\n  (-to-json [value]\n    (to-object value :var (var->symbol value))))\n\n(defn- can-meta? [value]\n  #?(:clj  (or (instance? clojure.lang.IObj value)\n               (instance? clojure.lang.Var value))\n     :cljs (implements? IMeta value)))\n\n(defn- has? [m k]\n  (try\n    (k m)\n    (catch #?(:clj Exception :cljs :default) _e)))\n\n(defn- no-cache [value]\n  (or (not (coll? value))\n      (not (can-meta? value))\n      (has? value :portal.rpc/id)))\n\n(defn- id-coll [value]\n  (if (no-cache value)\n    value\n    (if-let [id (value->id? value)]\n      (cson/->Tagged \"ref\" id)\n      (vary-meta value\n                 merge\n                 (cond-> {::id (value->id value)}\n                   (record? value)\n                   (assoc ::type (type value)))))))\n\n(defn write [value session]\n  (binding [*session* session]\n    (cson/write\n     value\n     (merge\n      session\n      {:transform id-coll}))))\n\n(defn- ref-> [value]\n  (id->value (second value)))\n\n(defn read [string session]\n  (binding [*session* session]\n    (cson/read\n     string\n     (merge\n      session\n      {:default-handler\n       (fn [value]\n         (case (first value)\n           \"ref\"    (ref-> value)\n           (cson/->Tagged (first value) (cson/json-> (second value)))))}))))\n\n(defonce tap-list (atom (list)))\n\n(defn update-value [new-value]\n  (swap! tap-list conj new-value))\n\n(defn clear-values\n  ([] (clear-values nil identity))\n  ([_request done]\n   (reset! id 0)\n   (reset! tap-list (list))\n   (reset! (:value-cache *session*) {})\n   (doseq [[a] @watch-registry]\n     (remove-watch a ::watch-key))\n   (reset! watch-registry {})\n   (done nil)))\n\n(defn update-selected\n  ([value]\n   (update-selected (:session-id *session*) value))\n  ([session-id value]\n   (swap! sessions assoc-in [session-id :selected] value)))\n\n(def ^:private predicates\n  (merge\n   {'clojure.core/deref\n    #?(:clj  #(instance? clojure.lang.IRef %)\n       :cljs #(satisfies? cljs.core/IDeref %))\n    'clojure.core/meta can-meta?}\n   #?(:clj\n      {'clojure.core/slurp\n       #(or (instance? URI %)\n            (instance? URL %)\n            (and (instance? File %)\n                 (.isFile ^File %)\n                 (.canRead ^File %)))})))\n\n(def ^:private public-fns\n  (merge\n   {'clojure.core/pr-str   #'pr-str\n    'clojure.core/deref    #'deref\n    'clojure.core/type     #'type\n    'clojure.core/meta     #'meta\n    'clojure.datafy/datafy #'datafy}\n   #?(:clj {`slurp slurp\n            `bean  bean})))\n\n(defn- get-functions [v]\n  (keys\n   (reduce-kv\n    (fn [fns s predicate]\n      (if (predicate v)\n        fns\n        (dissoc fns s)))\n    public-fns\n    predicates)))\n\n(defn- get-tap-atom [] tap-list)\n\n(defn- get-options []\n  (merge\n   {:name \"portal\"\n    :version \"0.15.1\"\n    :platform\n    #?(:bb   \"bb\"\n       :clj  \"jvm\"\n       :cljs (cond\n               (exists? js/process)        \"node\"\n               (exists? js/PLANCK_VERSION) \"planck\"\n               :else                        \"web\"))}\n   (:options *session*)))\n\n(defn- ping [] ::pong)\n\n(def ^:private fns\n  (merge\n   public-fns\n   {'clojure.datafy/nav  #'nav\n    `ping                #'ping\n    `get-tap-atom        #'get-tap-atom\n    `get-options         #'get-options\n    `clear-values        #'clear-values\n    `update-selected     #'update-selected\n    `get-functions       #'get-functions}))\n\n(defn invoke [{:keys [f args]} done]\n  (try\n    (let [f (if (symbol? f) (get fns f) f)]\n      (a/let [return (apply f args)]\n        (done {:return return})))\n    (catch #?(:clj Exception :cljs js/Error) e\n      (done {:return e}))))\n\n(def ops {:portal.rpc/invoke #'invoke})\n"]}