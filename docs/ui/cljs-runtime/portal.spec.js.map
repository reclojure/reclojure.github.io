{"version":3,"sources":["portal/spec.cljc"],"mappings":";AAIA,AAAAA,yBAAA,AAAA,gFAAA,AAAA,oUAAiB,AAAAC,8BAAA,wCAAA,yDAAA,wDAAA,kDAAA,iEAAA,8DAAA,6DAAA,8DAAA,mDAAA,4DAAA,+DAAA,gEAAA,qDAAA,AAAA,KAAA,AAAA,KAAA,KAAA,mFAAA,WAAAC;AAAA,AAAA,OAAAC,qBAAAD;WAAA,WAAAA;AAAA,AAAA,OAAAC,qBAAAD;GAAA,AAAA,2KAAA,AAAA,iCAAA,AAAA,KAAA,AAAA,iCAAA,AAAA,2KAAA,AAAA,8cAAA,AAAA;AAEjB,6BAAA,7BAAME,kEAAgBC;AAAtB,AACE,IAAMA,cAAQ,8BAAA,mFAAA,jHAACC,sBAAYD;IACrBE,SAAQ,wBAAA,xBAACC,wGAAoBH;AADnC,AAEE,GAAM,oDAAA,pDAACI,6CAAEF;AAAT,AACE,MAAO,gDAAA,hDAACG,kEAA0B,6BAAA,7BAACC,6GAAyBN;;AAD9D","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha/map-spec-impl","G__50645","cljs.core/map?","portal.spec/assert-options","options","cljs.core/select-keys","parsed","cljs.spec.alpha/conform","cljs.core._EQ_","cljs.core.ex_info","cljs.spec.alpha/explain-data"],"sourcesContent":["(ns portal.spec\n  (:require [clojure.spec.alpha :as s]\n            [portal.colors :as c]))\n\n(s/def ::options (s/keys :opt [::c/theme]))\n\n(defn assert-options [options]\n  (let [options (select-keys options [::c/theme])\n        parsed  (s/conform ::options options)]\n    (when (= parsed ::s/invalid)\n      (throw (ex-info \"Invalid options\" (s/explain-data ::options options))))))\n\n"]}