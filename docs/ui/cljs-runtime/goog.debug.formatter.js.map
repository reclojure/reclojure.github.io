{
"version":3,
"file":"goog.debug.formatter.js",
"lineCount":183,
"mappings":"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",
"sources":["goog/debug/formatter.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Definition of various formatters for logging. Please minimize\n * dependencies this file has on other closure classes as any dependency it\n * takes won't be able to use the logging infrastructure.\n */\n\ngoog.provide('goog.debug.Formatter');\ngoog.provide('goog.debug.HtmlFormatter');\ngoog.provide('goog.debug.TextFormatter');\n\ngoog.require('goog.debug');\ngoog.require('goog.debug.Logger');\ngoog.require('goog.debug.RelativeTimeProvider');\ngoog.require('goog.html.SafeHtml');\ngoog.require('goog.html.SafeUrl');\ngoog.require('goog.html.uncheckedconversions');\ngoog.require('goog.string.Const');\ngoog.requireType('goog.log.LogRecord');\n\n\n/**\n * Base class for Formatters. A Formatter is used to format a LogRecord into\n * something that can be displayed to the user.\n *\n * @param {string=} opt_prefix The prefix to place before text records.\n * @constructor\n */\ngoog.debug.Formatter = function(opt_prefix) {\n  'use strict';\n  this.prefix_ = opt_prefix || '';\n\n  /**\n   * A provider that returns the relative start time.\n   * @type {goog.debug.RelativeTimeProvider}\n   * @private\n   */\n  this.startTimeProvider_ =\n      goog.debug.RelativeTimeProvider.getDefaultInstance();\n};\n\n\n/**\n * Whether to append newlines to the end of formatted log records.\n * @type {boolean}\n */\ngoog.debug.Formatter.prototype.appendNewline = true;\n\n\n/**\n * Whether to show absolute time in the DebugWindow.\n * @type {boolean}\n */\ngoog.debug.Formatter.prototype.showAbsoluteTime = true;\n\n\n/**\n * Whether to show relative time in the DebugWindow.\n * @type {boolean}\n */\ngoog.debug.Formatter.prototype.showRelativeTime = true;\n\n\n/**\n * Whether to show the logger name in the DebugWindow.\n * @type {boolean}\n */\ngoog.debug.Formatter.prototype.showLoggerName = true;\n\n\n/**\n * Whether to show the logger exception text.\n * @type {boolean}\n */\ngoog.debug.Formatter.prototype.showExceptionText = false;\n\n\n/**\n * Whether to show the severity level.\n * @type {boolean}\n */\ngoog.debug.Formatter.prototype.showSeverityLevel = false;\n\n\n/**\n * Formats a record.\n * @param {?goog.log.LogRecord} logRecord the logRecord to format.\n * @return {string} The formatted string.\n */\ngoog.debug.Formatter.prototype.formatRecord = goog.abstractMethod;\n\n\n/**\n * Formats a record as SafeHtml.\n * @param {?goog.log.LogRecord} logRecord the logRecord to format.\n * @return {!goog.html.SafeHtml} The formatted string as SafeHtml.\n */\ngoog.debug.Formatter.prototype.formatRecordAsHtml = goog.abstractMethod;\n\n\n/**\n * Sets the start time provider. By default, this is the default instance\n * but can be changed.\n * @param {goog.debug.RelativeTimeProvider} provider The provider to use.\n */\ngoog.debug.Formatter.prototype.setStartTimeProvider = function(provider) {\n  'use strict';\n  this.startTimeProvider_ = provider;\n};\n\n\n/**\n * Returns the start time provider. By default, this is the default instance\n * but can be changed.\n * @return {goog.debug.RelativeTimeProvider} The start time provider.\n */\ngoog.debug.Formatter.prototype.getStartTimeProvider = function() {\n  'use strict';\n  return this.startTimeProvider_;\n};\n\n\n/**\n * Resets the start relative time.\n */\ngoog.debug.Formatter.prototype.resetRelativeTimeStart = function() {\n  'use strict';\n  this.startTimeProvider_.reset();\n};\n\n\n/**\n * Returns a string for the time/date of the LogRecord.\n * @param {?goog.log.LogRecord} logRecord The record to get a time stamp for.\n * @return {string} A string representation of the time/date of the LogRecord.\n * @private\n */\ngoog.debug.Formatter.getDateTimeStamp_ = function(logRecord) {\n  'use strict';\n  var time = new Date(logRecord.getMillis());\n  return goog.debug.Formatter.getTwoDigitString_((time.getFullYear() - 2000)) +\n      goog.debug.Formatter.getTwoDigitString_((time.getMonth() + 1)) +\n      goog.debug.Formatter.getTwoDigitString_(time.getDate()) + ' ' +\n      goog.debug.Formatter.getTwoDigitString_(time.getHours()) + ':' +\n      goog.debug.Formatter.getTwoDigitString_(time.getMinutes()) + ':' +\n      goog.debug.Formatter.getTwoDigitString_(time.getSeconds()) + '.' +\n      goog.debug.Formatter.getTwoDigitString_(\n          Math.floor(time.getMilliseconds() / 10));\n};\n\n\n/**\n * Returns the number as a two-digit string, meaning it prepends a 0 if the\n * number if less than 10.\n * @param {number} n The number to format.\n * @return {string} A two-digit string representation of `n`.\n * @private\n */\ngoog.debug.Formatter.getTwoDigitString_ = function(n) {\n  'use strict';\n  if (n < 10) {\n    return '0' + n;\n  }\n  return String(n);\n};\n\n\n/**\n * Returns a string for the number of seconds relative to the start time.\n * Prepads with spaces so that anything less than 1000 seconds takes up the\n * same number of characters for better formatting.\n * @param {?goog.log.LogRecord} logRecord The log to compare time to.\n * @param {number} relativeTimeStart The start time to compare to.\n * @return {string} The number of seconds of the LogRecord relative to the\n *     start time.\n * @private\n */\ngoog.debug.Formatter.getRelativeTime_ = function(logRecord, relativeTimeStart) {\n  'use strict';\n  var ms = logRecord.getMillis() - relativeTimeStart;\n  var sec = ms / 1000;\n  var str = sec.toFixed(3);\n\n  var spacesToPrepend = 0;\n  if (sec < 1) {\n    spacesToPrepend = 2;\n  } else {\n    while (sec < 100) {\n      spacesToPrepend++;\n      sec *= 10;\n    }\n  }\n  while (spacesToPrepend-- > 0) {\n    str = ' ' + str;\n  }\n  return str;\n};\n\n\n\n/**\n * Formatter that returns formatted html. See formatRecord for the classes\n * it uses for various types of formatted output.\n *\n * @param {string=} opt_prefix The prefix to place before text records.\n * @constructor\n * @extends {goog.debug.Formatter}\n */\ngoog.debug.HtmlFormatter = function(opt_prefix) {\n  'use strict';\n  goog.debug.Formatter.call(this, opt_prefix);\n};\ngoog.inherits(goog.debug.HtmlFormatter, goog.debug.Formatter);\n\n\n/**\n * Exposes an exception that has been caught by a try...catch and outputs the\n * error as HTML with a stack trace.\n *\n * @param {*} err Error object or string.\n * @param {?Function=} fn If provided, when collecting the stack trace all\n *     frames above the topmost call to this function, including that call,\n *     will be left out of the stack trace.\n * @return {string} Details of exception, as HTML.\n */\ngoog.debug.HtmlFormatter.exposeException = function(err, fn) {\n  'use strict';\n  var html = goog.debug.HtmlFormatter.exposeExceptionAsHtml(err, fn);\n  return goog.html.SafeHtml.unwrap(html);\n};\n\n\n/**\n * Exposes an exception that has been caught by a try...catch and outputs the\n * error with a stack trace.\n *\n * @param {*} err Error object or string.\n * @param {?Function=} fn If provided, when collecting the stack trace all\n *     frames above the topmost call to this function, including that call,\n *     will be left out of the stack trace.\n * @return {!goog.html.SafeHtml} Details of exception.\n */\ngoog.debug.HtmlFormatter.exposeExceptionAsHtml = function(err, fn) {\n  'use strict';\n  try {\n    var e = goog.debug.normalizeErrorObject(err);\n    // Create the error message\n    var viewSourceUrl =\n        goog.debug.HtmlFormatter.createViewSourceUrl_(e.fileName);\n    var error = goog.html.SafeHtml.concat(\n        goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces(\n            'Message: ' + e.message + '\\nUrl: '),\n        goog.html.SafeHtml.create(\n            'a', {href: viewSourceUrl, target: '_new'}, e.fileName),\n        goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces(\n            '\\nLine: ' + e.lineNumber + '\\n\\nBrowser stack:\\n' + e.stack +\n            '-> ' +\n            '[end]\\n\\nJS stack traversal:\\n' + goog.debug.getStacktrace(fn) +\n            '-> '));\n    return error;\n  } catch (e2) {\n    return goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces(\n        'Exception trying to expose exception! You win, we lose. ' + e2);\n  }\n};\n\n\n/**\n * @param {?string=} fileName\n * @return {!goog.html.SafeUrl} SafeUrl with view-source scheme, pointing at\n *     fileName.\n * @private\n */\ngoog.debug.HtmlFormatter.createViewSourceUrl_ = function(fileName) {\n  'use strict';\n  if (fileName == null) {\n    fileName = '';\n  }\n  if (!/^https?:\\/\\//i.test(fileName)) {\n    return goog.html.SafeUrl.fromConstant(\n        goog.string.Const.from('sanitizedviewsrc'));\n  }\n  var sanitizedFileName = goog.html.SafeUrl.sanitize(fileName);\n  return goog.html.uncheckedconversions\n      .safeUrlFromStringKnownToSatisfyTypeContract(\n          goog.string.Const.from('view-source scheme plus HTTP/HTTPS URL'),\n          'view-source:' + goog.html.SafeUrl.unwrap(sanitizedFileName));\n};\n\n\n\n/**\n * Whether to show the logger exception text\n * @type {boolean}\n * @override\n */\ngoog.debug.HtmlFormatter.prototype.showExceptionText = true;\n\n\n/**\n * Formats a record\n * @param {?goog.log.LogRecord} logRecord the logRecord to format.\n * @return {string} The formatted string as html.\n * @override\n */\ngoog.debug.HtmlFormatter.prototype.formatRecord = function(logRecord) {\n  'use strict';\n  if (!logRecord) {\n    return '';\n  }\n  // OK not to use goog.html.SafeHtml.unwrap() here.\n  return this.formatRecordAsHtml(logRecord).getTypedStringValue();\n};\n\n\n/**\n * Formats a record.\n * @param {?goog.log.LogRecord} logRecord the logRecord to format.\n * @return {!goog.html.SafeHtml} The formatted string as SafeHtml.\n * @override\n */\ngoog.debug.HtmlFormatter.prototype.formatRecordAsHtml = function(logRecord) {\n  'use strict';\n  if (!logRecord) {\n    return goog.html.SafeHtml.EMPTY;\n  }\n\n  var className;\n  switch (logRecord.getLevel().value) {\n    case goog.debug.Logger.Level.SHOUT.value:\n      className = 'dbg-sh';\n      break;\n    case goog.debug.Logger.Level.SEVERE.value:\n      className = 'dbg-sev';\n      break;\n    case goog.debug.Logger.Level.WARNING.value:\n      className = 'dbg-w';\n      break;\n    case goog.debug.Logger.Level.INFO.value:\n      className = 'dbg-i';\n      break;\n    case goog.debug.Logger.Level.FINE.value:\n    default:\n      className = 'dbg-f';\n      break;\n  }\n\n  // HTML for user defined prefix, time, logger name, and severity.\n  var sb = [];\n  sb.push(this.prefix_, ' ');\n  if (this.showAbsoluteTime) {\n    sb.push('[', goog.debug.Formatter.getDateTimeStamp_(logRecord), '] ');\n  }\n  if (this.showRelativeTime) {\n    sb.push(\n        '[', goog.debug.Formatter.getRelativeTime_(\n                 logRecord, this.startTimeProvider_.get()),\n        's] ');\n  }\n  if (this.showLoggerName) {\n    sb.push('[', logRecord.getLoggerName(), '] ');\n  }\n  if (this.showSeverityLevel) {\n    sb.push('[', logRecord.getLevel().name, '] ');\n  }\n  var fullPrefixHtml =\n      goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces(sb.join(''));\n\n  // HTML for exception text and log record.\n  var exceptionHtml = goog.html.SafeHtml.EMPTY;\n  if (this.showExceptionText && logRecord.getException()) {\n    exceptionHtml = goog.html.SafeHtml.concat(\n        goog.html.SafeHtml.BR,\n        goog.debug.HtmlFormatter.exposeExceptionAsHtml(\n            logRecord.getException()));\n  }\n  var logRecordHtml = goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces(\n      logRecord.getMessage());\n  var recordAndExceptionHtml = goog.html.SafeHtml.create(\n      'span', {'class': className},\n      goog.html.SafeHtml.concat(logRecordHtml, exceptionHtml));\n\n\n  // Combine both pieces of HTML and, if needed, append a final newline.\n  var html;\n  if (this.appendNewline) {\n    html = goog.html.SafeHtml.concat(\n        fullPrefixHtml, recordAndExceptionHtml, goog.html.SafeHtml.BR);\n  } else {\n    html = goog.html.SafeHtml.concat(fullPrefixHtml, recordAndExceptionHtml);\n  }\n  return html;\n};\n\n\n\n/**\n * Formatter that returns formatted plain text\n *\n * @param {string=} opt_prefix The prefix to place before text records.\n * @constructor\n * @extends {goog.debug.Formatter}\n * @final\n */\ngoog.debug.TextFormatter = function(opt_prefix) {\n  'use strict';\n  goog.debug.Formatter.call(this, opt_prefix);\n};\ngoog.inherits(goog.debug.TextFormatter, goog.debug.Formatter);\n\n\n/**\n * Formats a record as text\n * @param {?goog.log.LogRecord} logRecord the logRecord to format.\n * @return {string} The formatted string.\n * @override\n */\ngoog.debug.TextFormatter.prototype.formatRecord = function(logRecord) {\n  'use strict';\n  var sb = [];\n  sb.push(this.prefix_, ' ');\n  if (this.showAbsoluteTime) {\n    sb.push('[', goog.debug.Formatter.getDateTimeStamp_(logRecord), '] ');\n  }\n  if (this.showRelativeTime) {\n    sb.push(\n        '[', goog.debug.Formatter.getRelativeTime_(\n                 logRecord, this.startTimeProvider_.get()),\n        's] ');\n  }\n\n  if (this.showLoggerName) {\n    sb.push('[', logRecord.getLoggerName(), '] ');\n  }\n  if (this.showSeverityLevel) {\n    sb.push('[', logRecord.getLevel().name, '] ');\n  }\n  sb.push(logRecord.getMessage());\n  if (this.showExceptionText) {\n    var exception = logRecord.getException();\n    if (exception) {\n      var exceptionText =\n          exception instanceof Error ? exception.message : exception.toString();\n      sb.push('\\n', exceptionText);\n    }\n  }\n  if (this.appendNewline) {\n    sb.push('\\n');\n  }\n  return sb.join('');\n};\n\n\n/**\n * Formats a record as text\n * @param {?goog.log.LogRecord} logRecord the logRecord to format.\n * @return {!goog.html.SafeHtml} The formatted string as SafeHtml. This is\n *     just an HTML-escaped version of the text obtained from formatRecord().\n * @override\n */\ngoog.debug.TextFormatter.prototype.formatRecordAsHtml = function(logRecord) {\n  'use strict';\n  return goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces(\n      goog.debug.TextFormatter.prototype.formatRecord(logRecord));\n};\n"],
"names":["goog","provide","require","requireType","debug","Formatter","goog.debug.Formatter","opt_prefix","prefix_","startTimeProvider_","RelativeTimeProvider","getDefaultInstance","prototype","appendNewline","showAbsoluteTime","showRelativeTime","showLoggerName","showExceptionText","showSeverityLevel","formatRecord","abstractMethod","formatRecordAsHtml","setStartTimeProvider","goog.debug.Formatter.prototype.setStartTimeProvider","provider","getStartTimeProvider","goog.debug.Formatter.prototype.getStartTimeProvider","resetRelativeTimeStart","goog.debug.Formatter.prototype.resetRelativeTimeStart","reset","getDateTimeStamp_","goog.debug.Formatter.getDateTimeStamp_","logRecord","time","Date","getMillis","getTwoDigitString_","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","Math","floor","getMilliseconds","goog.debug.Formatter.getTwoDigitString_","n","String","getRelativeTime_","goog.debug.Formatter.getRelativeTime_","relativeTimeStart","ms","sec","str","toFixed","spacesToPrepend","HtmlFormatter","goog.debug.HtmlFormatter","call","inherits","exposeException","goog.debug.HtmlFormatter.exposeException","err","fn","html","exposeExceptionAsHtml","SafeHtml","unwrap","goog.debug.HtmlFormatter.exposeExceptionAsHtml","e","normalizeErrorObject","viewSourceUrl","createViewSourceUrl_","fileName","error","concat","htmlEscapePreservingNewlinesAndSpaces","message","create","href","target","lineNumber","stack","getStacktrace","e2","goog.debug.HtmlFormatter.createViewSourceUrl_","test","SafeUrl","fromConstant","string","Const","from","sanitizedFileName","sanitize","uncheckedconversions","safeUrlFromStringKnownToSatisfyTypeContract","goog.debug.HtmlFormatter.prototype.formatRecord","getTypedStringValue","goog.debug.HtmlFormatter.prototype.formatRecordAsHtml","EMPTY","className","getLevel","value","Logger","Level","SHOUT","SEVERE","WARNING","INFO","FINE","sb","push","get","getLoggerName","name","fullPrefixHtml","join","exceptionHtml","getException","BR","logRecordHtml","getMessage","recordAndExceptionHtml","TextFormatter","goog.debug.TextFormatter","goog.debug.TextFormatter.prototype.formatRecord","exception","exceptionText","Error","toString","goog.debug.TextFormatter.prototype.formatRecordAsHtml"]
}
