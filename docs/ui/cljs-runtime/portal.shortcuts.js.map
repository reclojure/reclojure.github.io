{"version":3,"sources":["portal/shortcuts.cljs"],"mappings":"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","names":["portal.shortcuts/get-platform","platform","js/window.navigator.platform","fexpr__56600","fexpr__56602","clojure.string/includes?","portal.shortcuts/get-shortcut","definition","cljs.core/map?","or__4223__auto__","cljs.core.get","portal.shortcuts/event->key","e","temp__5753__auto__","k","portal.shortcuts/log->seq","log","cljs.core.map","iter__4622__auto__","s__56609","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__4620__auto__","size__4621__auto__","cljs.core/count","b__56611","cljs.core/chunk-buffer","i__56610","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__56608","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","n","cljs.core/reverse","cljs.core/inc","cljs.core.range","cljs.core.into","cljs.core.take","portal.shortcuts/log->combo","G__56616","cljs.core.conj","js/portal","js/portal.shortcuts","js/portal.shortcuts.log","portal.shortcuts/log","cljs.core.atom","portal.shortcuts/clear!","cljs.core/reset!","portal.shortcuts/match?","cljs.core/some","combo","cljs.core._EQ_","cljs.core.concat","portal.shortcuts/input?","G__56621","fexpr__56620","portal.shortcuts/keydown","p1__56624#","cljs.core.swap_BANG_","portal.shortcuts/init","cljs.core/deref","js/window.addEventListener","p1__56625#","portal.shortcuts/matched!","portal.shortcuts/add!","f","cljs.core/add-watch","_","cljs.core/empty?","portal.shortcuts/remove!","cljs.core/remove-watch","cljs.core/chunk-first","cljs.core/List"],"sourcesContent":["(ns portal.shortcuts\n  (:require [clojure.string :as str]))\n\n(defn- get-platform []\n  (let [platform js/window.navigator.platform]\n    (cond\n      (#{\"Macintosh\" \"MacIntel\" \"MacPPC\" \"Mac68K\"} platform)  ::osx\n      (#{\"Win32\" \"Win64\" \"Windows\" \"WinCE\"} platform)         ::windows\n      (str/includes? platform \"Linux\")                        ::linux)))\n\n(defn get-shortcut [definition]\n  (cond\n    (string? definition) #{definition}\n\n    (map? definition)\n    (or (get definition (get-platform))\n        (get definition ::default))\n\n    :else definition))\n\n(defn- event->key [e]\n  (when-let [k (.-key e)] (.toLowerCase k)))\n\n(defn- log->seq\n  \"Returns all key sequences in the event log.\"\n  [log]\n  (let [log (map event->key log)]\n    (for [n (reverse (map inc (range (count log))))]\n      (into [] (reverse (take n log))))))\n\n(defn- log->combo\n  \"Return the last key combo from the event log.\"\n  [log]\n  (when-let [e (first log)]\n    (cond-> #{(event->key e)}\n      (.-ctrlKey e)  (conj \"control\")\n      (.-metaKey e)  (conj \"meta\")\n      (.-shiftKey e) (conj \"shift\")\n      (.-altKey e)   (conj \"alt\"))))\n\n(defonce ^:private log (atom nil))\n\n(defn clear! [] (reset! log (list)))\n\n(defn match? [definition log]\n  (some (fn [combo]\n          (= combo (get-shortcut definition)))\n        (concat [(log->combo log)] (log->seq log))))\n\n(defn input? [log]\n  (when-let [e (first log)]\n    (#{\"BUTTON\" \"INPUT\" \"SELECT\"}\n     (.. e -target -tagName))))\n\n(defn- keydown [e] (swap! log #(take 5 (conj % e))))\n\n(defn- init []\n  (when (nil? @log)\n    (clear!)\n    (js/window.addEventListener \"blur\" #(clear!))\n    (js/window.addEventListener \"keydown\" #(keydown %))))\n\n(defn matched! [log]\n  (clear!)\n  (when-let [e (first log)] (.preventDefault e)))\n\n(defn add! [k f]\n  (init)\n  (add-watch\n   log k\n   (fn [_ _ _ log]\n     (when-not (empty? log)\n       (f log)))))\n\n(defn remove! [k] (remove-watch log k))\n\n"]}