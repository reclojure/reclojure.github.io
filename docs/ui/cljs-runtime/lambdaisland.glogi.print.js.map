{"version":3,"sources":["lambdaisland/glogi/print.cljs"],"mappings":";AAMA,kCAAA,wCAAA,uDAAA,qDAAA,uDAAA,uDAAA,sDAAA,yDAAA,uDAAA,6DAAA,wDAAA,mDAAA,qDAAA,yDAAA,wDAAA,uDAAA,uDAAA,yDAAA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,rlCAAKA;AAkBL,uCAAA,vCAAMC,sFAAaC;AAAnB,AACE,IAAAC,cAAOgB;IAAPf,cAAU,AAACgB,+BAAkBlB;AAA7B,AAAA,oBAAA,iBAAAG,WACE,+BAAA,/BAACe;IADHd,WAAAF;AAAA,AAAA,QAAAD,4CAAAA,0CAAAE,SAAAC,YAAAH,sBAAAE,SAAAC;;AAAA;;AAAA,oBAAA,iBAAAC,WAEE,+BAAA,/BAACa;IAFHZ,WAAAJ;AAAA,AAAA,QAAAD,4CAAAA,0CAAAI,SAAAC,YAAAL,sBAAAI,SAAAC;;AAAA;;AAAA,oBAAA,iBAAAC,WAGE,+BAAA,/BAACW;IAHHV,WAAAN;AAAA,AAAA,QAAAD,4CAAAA,0CAAAM,SAAAC,YAAAP,sBAAAM,SAAAC;;AAAA;;AAAA,oBAAA,iBAAAC,WAIE,+BAAA,/BAACS;IAJHR,WAAAR;AAAA,AAAA,QAAAD,4CAAAA,0CAAAQ,SAAAC,YAAAT,sBAAAQ,SAAAC;;AAAA;;AAAA,oBAAA,iBAAAC,WAKE,+BAAA,/BAACO;IALHN,WAAAV;AAAA,AAAA,QAAAD,4CAAAA,0CAAAU,SAAAC,YAAAX,sBAAAU,SAAAC;;AAAA;;AAAA,oBAAA,iBAAAC,WAME,+BAAA,/BAACK;IANHJ,WAAAZ;AAAA,AAAA,QAAAD,4CAAAA,0CAAAY,SAAAC,YAAAb,sBAAAY,SAAAC;;AAAA;;AAAA,oBAAA,iBAAAC,WAOE,+BAAA,/BAACG;IAPHF,WAAAd;AAAA,AAAA,QAAAD,4CAAAA,0CAAAc,SAAAC,YAAAf,sBAAAc,SAAAC;;AAAA;;AAAA;;;;;;;;;AAUF,AAAA,+BAAA,uCAAAG,tEAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,2DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,2DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,2DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,6DAAA,WAAAC,xEAAMF,iFACYW;AADlB,AAAA,IAAAR,aAAAD;UAAA,AAAAE,4CAAAD,WAAA,IAAA,jEACKM;cADL,AAAAL,4CAAAD,WAAA,IAAA,rEACSO;AADT,AAAA,0FAEI,6CAAKD,iDAAIE,aAAGD;;;AAFhB,CAAA,6DAAA,WAAAL,xEAAML,iFAGYW,EAAEC;AAHpB,AAAA,IAAAN,aAAAD;UAAA,AAAAD,4CAAAE,WAAA,IAAA,jEAGKG;cAHL,AAAAL,4CAAAE,WAAA,IAAA,rEAGSI;AAHT,AAAA,0FAII,kDAAA,oDAAA,zDAAKD,UAAS,4CAAKE,kBAAS,kQAAA,lQAACE,oDAAKH,QAAQ,CAAA,qDAAc,AAACI,4CAAIrC,gCAAOmC;;;AAJxE,CAAA,6DAAA,WAAAL,xEAAMP,iFAKYW,EAAEI,GAAGC;AALvB,AAAA,IAAAR,aAAAD;UAAA,AAAAH,4CAAAI,WAAA,IAAA,jEAKKC;cALL,AAAAL,4CAAAI,WAAA,IAAA,rEAKSE;AALT,AAAA,0FAMI,kDAAA,oDAAA,zDAAKD,UAAS,4CAAKE,kBAAS,iZAAA,jZAACE,oDAAKH,QACA,CAAA,sIAAA,jFAAc,AAACI,4CAAIrC,gCAAOsC,sEACA,AAACD,4CAAIrC,gCAAOuC;;;AAR5E,CAAA,uDAAA,vDAAMhB;;AAAN,AAWA,iDAAA,jDAAMiB,0GAAuBR,IAAIS;;AAAjC,AACE,GACE,6CAAA,7CAACC,mJAAUD;AACX,sEAAA,KAAA,pEAACE,2DAAIX;;AAFP,GAIE,6CAAA,7CAACU,mJAAUD;AACX,sEAAA,/DAACE,2DAAIX;;AALP,GAOE,kBAAAY,jBAAUH;AACV,4EAAA,rEAACE,2DAAIX,IAAIS;;AARX,GAUE,kBAAAI,jBAASJ;AACT,4EAAA,rEAACE,2DAAIX,IAAIS;;AAXX,GAaE,OAASA;AACT,0LAAA,nLAACE,2DAAIX,IAAI,AAACc,wGAAOL;;AAdnB,GAgBE,AAACM,2BAAWN;sGACRT,5BACA,iBAAAgB,5EACA,AAACL,fACD,IAAAQ;IAFAF,WAAuB,AAACC,cAAIT;AAA5B,AAAA,oKAAAO,SAAAC,qEAAAD,SAAAC,nPAACT,+EAAAA,kGAAAA;KACD;IACAY,WAAuB,AAACC,cAAIZ;AAA5B,AAAA,oKAAAU,SAAAC,qEAAAD,SAAAC,nPAACZ,+EAAAA,kGAAAA;;AApBP,GAsBE,EAAI,kBAAWc,jBAA6Bb,oDACxC,kBAAWc,jBAA4Bd;AAC3C,gBAAMT,ZAAIwB;IAAAA,gBACR,qEAAA,IAAA,zEAACb,2DAAIa;IADGA,gBAER,AAACC,+CAAOjB,+CAAsBgB,cAAE,kDAAA,lDAACE,wJAAkBjB;AAFrD,AAGE,gFAAA,IAAA,7EAACE,2DAAIa;;AA3BT,GA6BE,AAACG,qBAAKlB;AACN,gBAAMT,ZAAIwB;IAAAA,gBACR,AAACb,2DAAIa,UAAE,CAAA,gDAAS,iBAAMI,IAAE,AAACC,eAAKpB;IACRqB,IAAE,AAAQF;AADhB,AAEE,GAAI,AAACG,uBAAOD;AACV,OAAChB,wGAAOc;;AACRE;;oBAJpB,dAAO;IADCN,gBAMR,yEAAA,IAAA,7EAACb,2DAAIa;IANGA,gBAOR,AAACC,+CAAOjB,+CAAsBgB,cAAE,kDAAA,lDAACE,wJAAkBjB;AAPrD,AAQE,gFAAA,IAAA,7EAACE,2DAAIa;;AAtCT,GAwCE,AAACQ,qBAAKvB;AACN,gBAAMT,ZAAIwB;IAAAA,gBACR,qEAAA,KAAA,1EAACb,2DAAIa;IADGA,gBAER,AAACC,+CAAOjB,+CAAsBgB,cAAE,kDAAA,lDAACE,wJAAkBjB;AAFrD,AAGE,gFAAA,IAAA,7EAACE,2DAAIa;;AA5CT,GA8CE,AAACS,wBAAQxB;AACT,gBAAMT,ZAAIwB;IAAAA,gBACR,qEAAA,IAAA,zEAACb,2DAAIa;IADGA,gBAER,AAACC,+CAAOjB,+CAAsBgB,cAAE,kDAAA,lDAACE,wJAAkBjB;AAFrD,AAGE,gFAAA,IAAA,7EAACE,2DAAIa;;AAlDT,GAoDE,kBAAWU,jBAA0BzB;0EACjCT,3DACA,+DAAA,UAAA,zEAACW,fACD;eAAO,6CAAA,7CAACwB,8EAAQ1B;;;;;AAvDtB,GAyDE,AAAC2B,qBAAK3B;AACN,gBAAMT,ZAAIwB;IAAAA,gBACR,qEAAA,IAAA,zEAACb,2DAAIa;IADGA,gBAER,AAACC,+CAAOjB,+CAAsBgB,cAAE,kDAAA,lDAACE,wJAAkBjB;AAFrD,AAGE,gFAAA,IAAA,7EAACE,2DAAIa;;AA7DT,GA+DE,EAAA,GAAA,UAAA,SAAA,EAAA,EAAA,CAAA,4CAAA,cAAA,CAAAa,gCAAA,2BAAA,KAAA,EAAA,EAAA,4CAAA,AAAAC,yDAAA,QAAA,AAAAA,/BAAYC,iEAAAA,rSAAM9B,uBAAAA,2FAAAA,oCAAAA,8FAAAA,iEAAAA;0EACdT,3DACA,+DAAA,SAAA,xEAACW,fACD;eAAA,AAAA6B,gBAAQ/B;;;;;AAlEd,GAoEE,AAACgC,sBAAMhC;0EACHT,3DACA,+DAAA,SAAA,xEAACW,fACD;eAAO,4CAAKF;;;;;AAvElB,GAyEE,AAACiC,wBAAQjC;0EACLT,3DACA,+DAAA,OAAA,tEAACW,fACD;eAAO,+CAAA,/CAACc;kBAADkB,iBAAAC;AAAA,AAAS,qDAAAD,9CAACE,+DAAS,gDAAAD,hDAACE,kEAAY,sBAAAF,tBAACG,gBAAStC;;CAA1C,mCAAwD,AAACuC,YAAevC;;;;;AA5ErF,GA8EE,AAACwC,uBAAOxC;0EACJT,3DACA,+DAAA,OAAA,tEAACW,fACD;eAAO,6CAAA,7CAACwB,8EAAQ1B;;;;;AAjFtB,AAoFE,0LAAA,nLAACE,2DAAIX,IAAI,AAACc,wGAAOL;;;;;;;;;;;;;;;;;;;;;AAErB,kCAAA,lCAAMyC,4EAAQhF,MAAMiF,YAAY1C;AAAhC,AACE,IAAMN,QAAM,AAAClC,qCAAYC;IAAzBkF,6OAEwB,2DAAA,mFAAA,GAAA,yCAAA,IAAA,9LAACzC,qPAAeR,hTAChB,mUAAA,nUAACQ,uTAAIwC,mEAAmBhD,rbACxB,4bAAA,IAAA,hcAACQ,ufAAeR,ljBAChB,yjBAAA,zjBAACQ,/CACD,AAACH,6mBAAsBC;UAN/C,AAAAd,4CAAAyD,WAAA,IAAA,jEACOpD;cADP,AAAAL,4CAAAyD,WAAA,IAAA,rEACWnD;AADX,AAOE,OAACoD,eAAKrD,IAAIC","names":["lambdaisland.glogi.print/colors","lambdaisland.glogi.print/level-color","level","pred__50085","expr__50086","G__50088","G__50089","G__50090","G__50091","G__50092","G__50093","G__50095","G__50096","G__50098","G__50099","G__50101","G__50102","G__50103","G__50104","cljs.core/<=","lambdaisland.glogi/level-value","var_args","G__50111","lambdaisland.glogi.print/add","js/Error","p__50116","vec__50118","cljs.core.nth","p__50129","vec__50131","p__50141","vec__50142","res","res-css","s","color","cljs.core.conj","cljs.core.get","fg","bg","lambdaisland.glogi.print/print-console-log-css","value","cljs.core._EQ_","lambdaisland.glogi.print.add","cljs.core/Keyword","cljs.core/Symbol","cljs.core.pr_str","cljs.core/map-entry?","G__50161","G__50162","cljs.core/key","G__50159","G__50160","cljs.core/val","cljs.core/PersistentArrayMap","cljs.core/PersistentHashMap","%","cljs.core.reduce","cljs.core.interpose","cljs.core/map?","t","cljs.core/type","n","cljs.core/empty?","cljs.core/set?","cljs.core/vector?","cljs.core/PersistentQueue","cljs.core.into","cljs.core/seq?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IAtom","cljs.core/deref","cljs.core/uuid?","cljs.core/object?","p1__50150#","p2__50151#","cljs.core.assoc","cljs.core.keyword","goog.object/get","js/Object.keys","cljs.core/array?","lambdaisland.glogi.print/format","logger-name","vec__50180","cljs.core/cons"],"sourcesContent":["(ns lambdaisland.glogi.print\n  (:require [lambdaisland.glogi :as glogi]\n            [goog.object :as gobj]))\n\n;; https://github.com/chriskempson/base16-tomorrow-scheme/blob/master/tomorrow.yaml\n\n(def colors\n  {:white    \"#ffffff\"\n   :gray1    \"#e0e0e0\"\n   :gray2    \"#d6d6d6\"\n   :gray3    \"#8e908c\"\n   :gray4    \"#969896\"\n   :gray5    \"#4d4d4c\"\n   :gray6    \"#282a2e\"\n   :black    \"#1d1f21\"\n   :red      \"#c82829\"\n   :orange   \"#f5871f\"\n   :yellow   \"#eab700\"\n   :green    \"#718c00\"\n   :turqoise \"#3e999f\"\n   :blue     \"#4271ae\"\n   :purple   \"#8959a8\"\n   :brown    \"#a3685a\"})\n\n(defn level-color [level]\n  (condp <= (glogi/level-value level)\n    (glogi/level-value :severe)  :red\n    (glogi/level-value :warning) :orange\n    (glogi/level-value :info)    :blue\n    (glogi/level-value :config)  :green\n    (glogi/level-value :fine)    :yellow\n    (glogi/level-value :finer)   :gray3\n    (glogi/level-value :finest)  :gray4\n    :gray2))\n\n(defn add\n  ([[res res-css] s]\n   [(str res s) res-css])\n  ([[res res-css] s color]\n   [(str res \"%c\" (str s) \"%c\") (conj res-css (str \"color:\" (get colors color)) \"color:black\")])\n  ([[res res-css] s fg bg]\n   [(str res \"%c\" (str s) \"%c\") (conj res-css\n                                      (str \"color:\" (get colors fg)\n                                           \";background-color:\" (get colors bg))\n                                      \"color:black;background-color:inherit\")]))\n\n(defn print-console-log-css [res value]\n  (cond\n    (= ::comma value)\n    (add res \", \" :gray2)\n\n    (= ::space value)\n    (add res \" \")\n\n    (keyword? value)\n    (add res value :blue)\n\n    (symbol? value)\n    (add res value :green)\n\n    (string? value)\n    (add res (pr-str value) :turqoise)\n\n    (map-entry? value)\n    (-> res\n        (print-console-log-css (key value))\n        (add \" \")\n        (print-console-log-css (val value)))\n\n    (or (instance? cljs.core/PersistentArrayMap value)\n        (instance? cljs.core/PersistentHashMap value))\n    (as-> res %\n      (add % \"{\" :purple)\n      (reduce print-console-log-css % (interpose ::comma value))\n      (add % \"}\" :purple))\n\n    (map? value) ;; non-standard map implementation\n    (as-> res %\n      (add % (str \"#\" (let [t (type value)\n                            n (.-name t)]\n                        (if (empty? n)\n                          (pr-str t)\n                          n)) \" \") :brown)\n      (add % \"{\" :purple)\n      (reduce print-console-log-css % (interpose ::comma value))\n      (add % \"}\" :purple))\n\n    (set? value)\n    (as-> res %\n      (add % \"#{\" :purple)\n      (reduce print-console-log-css % (interpose ::space value))\n      (add % \"}\" :purple))\n\n    (vector? value)\n    (as-> res %\n      (add % \"[\" :purple)\n      (reduce print-console-log-css % (interpose ::space value))\n      (add % \"]\" :purple))\n\n    (instance? cljs.core.PersistentQueue value)\n    (-> res\n        (add \"#queue \" :brown)\n        (recur (into [] value)))\n\n    (seq? value)\n    (as-> res %\n      (add % \"(\" :brown)\n      (reduce print-console-log-css % (interpose ::space value))\n      (add % \")\" :brown))\n\n    (satisfies? IAtom value)\n    (-> res\n        (add \"#atom \" :brown)\n        (recur @value))\n\n    (uuid? value)\n    (-> res\n        (add \"#uuid \" :brown)\n        (recur (str value)))\n\n    (object? value)\n    (-> res\n        (add \"#js \" :brown)\n        (recur (reduce #(assoc %1 (keyword %2) (gobj/get value %2)) {} (js/Object.keys value))))\n\n    (array? value)\n    (-> res\n        (add \"#js \" :brown)\n        (recur (into [] value)))\n\n    :else\n    (add res (pr-str value) :gray5)))\n\n(defn format [level logger-name value]\n  (let [color (level-color level)\n        [res res-css] (-> [\"\" []]\n                          (add \"[\" :white color)\n                          (add logger-name :white color)\n                          (add \"]\" :white color)\n                          (add \" \")\n                          (print-console-log-css value))]\n    (cons res res-css)))\n"]}